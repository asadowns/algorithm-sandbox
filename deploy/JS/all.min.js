"use strict";function _toConsumableArray(r){if(Array.isArray(r)){for(var e=0,n=Array(r.length);e<r.length;e++)n[e]=r[e];return n}return Array.from(r)}var AlmostSorted=function(){function r(r,e){isAlreadySorted?console.log("yes"):r?(console.log("yes"),console.log("swap"+r)):e?(console.log("yes"),console.log("reverse"+e)):r||e||console.log("no")}function e(r){return r.filter(function(r,e,n){return r>n[e+1]||e>0&&r<n[e-1]||r===n.slice(-1)[0]&&r<n[e-1]})}function n(r,e,n){var t=r.indexOf(e[0]),o=r.indexOf(e[1]),s=this.swapElementsArray(r,t,o),i=" "+(t+1)+" "+(o+1);return s.toString()===n.toString()&&i}function t(r,e,n){var t=this.reverseElementsArray(r,e),o=t.indexOf(e[0]),s=t.indexOf(e.slice(-1)[0])+1,i=" "+(o+1)+" "+s;return t.toString()===n.toString()&&i}function o(r,e){var n=r,t=n.indexOf(e[0]),o=n.indexOf(e.slice(-1)[0])+1,s=n.slice(t,o).reverse();return n.splice.apply(n,[t,o-t].concat(_toConsumableArray(s))),n}function s(r,e,n){var t=r[e];return r[e]=r[n],r[n]=t,r}var i={printResponse:r,getOutOfOrder:e,testSwap:n,testReverse:t,reverseElementsArray:o,swapElementsArray:s};return i}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
